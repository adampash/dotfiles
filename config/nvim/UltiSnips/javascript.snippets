snippet rc "Boilerplate for a basic React component" b
import React, { Component } from 'react'

class ${1:ComponentName} extends Component {
  constructor(props) {
    super(props)
    this.state = {}
  }

  render() {
		$0
    return (
      <div className="$1">
        { "$1 component" }
      </div>
    )
  }
}

export default $1
endsnippet

snippet rp "Boilerplate for a pure React component" b
import React from 'react'

const ${1:ComponentName} = (${2:props}) => {
	$0
  return (
    <div>
    { "$1 component" }
    </div>
  )
}

export default $1
endsnippet

snippet rct "Boilerplate for a basic React component in Typescript" b
import * as React from 'react'

interface Props {
}

interface State {
}

class ${1:ComponentName} extends React.Component<Props, State> {
  state = {}

  render() {
		$0
    return (
      <div>
        { "$1 component" }
      </div>
    )
  }
}

export default $1
endsnippet

snippet rpt "Boilerplate for a pure React component in Typescript" b
import * as React from 'react'

interface Props {
}

const ${1:ComponentName} = (${2:props}: Props) =>
  ($0
    <div>
    { "$1 component" }
    </div>
  )

export default $1
endsnippet
snippet ii "magic import" b
import `!p
def formatName(name):
	parts = name.split('-')
	func = lambda s: s[:1].lower() + s[1:] if s else ''
	return func("".join(map((lambda x: x.capitalize()), parts)))

def formatVariableName(path):
  parts = path.split('/')
  module = parts[0]
  if len(parts) > 1:
    return formatName(parts[-1])
  else:
    return re.sub(r'[_\-]', '', module.title())
snip.rv = formatVariableName(t[1])
` from '${1}';$0
endsnippet

snippet test "Boilerplate for jest tests" b
import ${1:functionName} from './${2:path}';

describe('$1', () => {
	it('${3:tests truth}', () => {
    const args = "";
    const expected = "";
		expect($1(args)).toEqual(expected)
	});
});
endsnippet

snippet describe "Boilerplate for describe block" b
describe('${1:functionName}', () => {
	it('${2:tests truth}', () => {
		assert.equal(true, true);$0
	});
});
endsnippet

snippet it "Boilerplate for it block" b
it('${1:tests truth}', () => {
	assert.equal(true, true);$0
});
endsnippet


global !p
def camel_to_dash(name):
	s1 = re.sub('(.)([A-Z][a-z]+)', r'\1-\2', name)
	return re.sub('([a-z0-9])([A-Z])', r'\1-\2', s1).lower()

def no_ext(name):
  return ".".join(name.split(".")[0:-1])

def args_to_const(args):
	if args == '':
		return ''
	else:
		return "\n    ".join(map(lambda x: "const {} = '';".format(x), args.split(', ')))
endglobal

snippet mod "Boilerplate for es6 module" b
const ${1:functionName} = (${2:args}) => {
	$0
};

export default $1;

// Place below into ./`!p
snip.rv = camel_to_dash(t[1])
`.test.js
import assert from 'assert';

import $1 from './`!p
snip.rv = camel_to_dash(t[1])
`';

describe('$1', () => {
	it('tests $1($2)', () => {
		`!p
snip.rv = args_to_const(t[2])
		`
		assert.equal($1($2), true);$0
	});
});
endsnippet

snippet cjs "console.log(JSON)" b
console.log('$1', JSON.stringify(${1:variable}, null, 2));
endsnippet

snippet cl "console.log('string')" b
console.log('$0');
endsnippet

snippet cv "console.log('var', var)" b
console.log(\`$1\`, ${1:variable});
endsnippet

snippet fn "es6 function" b
const ${1:fnName} = (${2:args}) => {
	$0
}
endsnippet

snippet req "require()" b
const ${1:requireName} = require('${2:$1}');
endsnippet
